import java.util.HashMap;
import java.util.HashSet;
// https://leetcode.com/problems/minimize-malware-spread-ii/submissions/
public class Minimize_Malware_Spread_II {
    int[] par;
    int[] size ;
    public int findPar(int u)
    {
        if(par[u] == u)
            return u;
        return par[u] = findPar(par[u]);
    }
    public void merge(int p1,int p2)
    {
        if(size[p1] > size[p2])
        {
            par[p2] = p1;
            size[p1] += size[p2];
        }
        else
        {
            par[p1] = p2;
            size[p2] += size[p1];
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        par = new int[n];
        size = new int[n];
        for(int i=0;i<n;i++)
        {
            size[i] = 1;
            par[i] = i;
        }
        HashSet<Integer> set = new HashSet<>();
        for(int e : initial)
        {
            set.add(e);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(graph[i][j] == 1 && !set.contains(i) && !set.contains(j))
                {
                    int p1 = findPar(i);
                    int p2 = findPar(j);
                    if(p1 != p2)
                    {
                        merge(p1,p2);
                    }
                }
            }
        }
        HashMap<Integer,HashSet<Integer>> map = new HashMap<>();
        int[] infected = new int[n];
        for(int e : initial)
        {
            map.put(e,new HashSet<>());
            for(int j=0;j<n;j++)
            {
                if(graph[e][j] == 1 && e != j && !set.contains(j))
                {
                    int p = findPar(j);
                    if(!map.get(e).contains(p))
                    {
                        map.get(e).add(p);
                        infected[p]++;
                    }
                }
            }
        }
        int ans = -1;
        int max = -1;
        for(int e : initial)
        {
           HashSet<Integer> pars = map.get(e);
           int total =0;
           for(int p : pars)
           {
               if(infected[p] == 1)
               {
                   total += size[p];
               }
           }
           if(total >= max)
           {
               if(total == max)
                   ans = Math.min(ans,e);
               else
                   ans = e;
               max = total;
           }
        }
        if(ans == -1)
        {
            int min = n + 1;
            for(int e : initial)
                min = Math.min(min,e);
            return min;
        }
        return ans;
    }
}
